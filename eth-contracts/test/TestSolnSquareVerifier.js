// Test if a new solution can be added for contract - SolnSquareVerifier

// Test if an ERC721 token can be minted for contract - SolnSquareVerifier
// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SolnSquareVerifier = artifacts.require("SolnSquareVerifier");
const SquareVerifier = artifacts.require("Verifier");
const Proof = require("./proof.json");

contract("SolnSquareVerifier", (accounts) => {
  describe("match specs", function () {
    beforeEach(async function () {
      this.verifier = await SquareVerifier.new();
      this.solnSquareVerifier = await SolnSquareVerifier.new(
        "ERC721MintableToken",
        "TKN",
        this.verifier.address,
        { from: accounts[0] }
      );
    });

    it("is able to add a new solution correctly", async function () {
      await this.solnSquareVerifier.addSol.sendTransaction(
        {
          index: "4567",
          addr: accounts[0],
        },
        {
          from: accounts[0],
        }
      );
      const sols = await this.solnSquareVerifier.getSols.call();
      assert.equal(sols.length, 1, "Unable to add");
    });

    it("can mint ERC721 token", async function () {
      const { proof, inputs } = Proof;
      const result = await this.solnSquareVerifier.mintNft.call(
        accounts[2],
        "12345",
        proof.a,
        proof.b,
        proof.c,
        inputs,
        {
          from: accounts[0],
        }
      );
      assert.equal(result, true, "mint token corectly");
    });
  });
});
